import 'package:cloud_firestore/cloud_firestore.dart' as firestore;
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/foundation.dart';
import '../models/cart_item.dart';
import '../models/order.dart';

class OrderService with ChangeNotifier {
  final firestore.FirebaseFirestore _firestore = firestore.FirebaseFirestore.instance;
  final FirebaseAuth _auth = FirebaseAuth.instance;
  
  String get currentUserId => _auth.currentUser?.uid ?? '';

  Future<String> createOrder(List<CartItem> items, double total, 
      {required Map<String, String> shippingInfo}) async {
    final user = _auth.currentUser;
    if (user == null) throw Exception('User not logged in');

    try {
      final order = Order(
        id: '', // Will be generated by Firestore
        userId: user.uid,
        items: items,
        total: total,
        date: DateTime.now(),
        shippingInfo: shippingInfo,
      );

      final docRef = await _firestore
          .collection('orders') // Main orders collection
          .add(order.toMap());

      // Also save to user's subcollection for easy querying
      await _firestore
          .collection('users')
          .doc(user.uid)
          .collection('orders')
          .doc(docRef.id)
          .set(order.toMap());

      notifyListeners();
      return docRef.id;
    } catch (e) {
      debugPrint('Error creating order: $e');
      rethrow;
    }
  }

  Future<List<Order>> getUserOrders(String uid) async {
    try {
      final snapshot = await _firestore
          .collection('users')
          .doc(uid)
          .collection('orders')
          .orderBy('date', descending: true)
          .get();

      return snapshot.docs.map((doc) => Order.fromFirestore(doc)).toList();
    } catch (e) {
      debugPrint('Error fetching orders: $e');
      return [];
    }
  }
}